---
import { getRelativeLocaleUrl } from 'astro:i18n'
import Button from '@components/button/button.astro'
import { getLangFromUrl, useTranslations } from '@i18n/utils'
import Logo from '@components/logo/Logo.astro'
import Icon from '@components/icon/icon.astro'
import './navbar.scss'

interface Props {
  projectSlug?: string
  translatedProjectSlug?: string
}

const { projectSlug, translatedProjectSlug }: Props = Astro.props
const url = Astro.url
const pathname = url.pathname
const lang = getLangFromUrl(url)
const t = useTranslations(lang)
const colorModesTranslations = {
  lightMode: t('navbar.lightMode'),
  darkMode: t('navbar.darkMode')
}

function getLanguageURL(lang: 'es' | 'en') {
  const languages = {
    en: () => {
      if (projectSlug) {
        let newURL = getRelativeLocaleUrl('en', pathname)
        newURL = newURL.replace(`es/`, '')
        newURL = newURL.replace(`${projectSlug}/`, '')
        newURL = newURL + `${translatedProjectSlug}/`

        return newURL
      }

      return getRelativeLocaleUrl('en', pathname.replace('/es/', ''))
    },
    es: () => {
      if (projectSlug) {
        let newURL = getRelativeLocaleUrl('es', pathname)
        newURL = newURL.replace(`${projectSlug}/`, '')
        newURL = newURL + `${translatedProjectSlug}/`

        return newURL
      }

      return getRelativeLocaleUrl('es', pathname)
    }
  }

  return languages[lang]()
}
---

<nav class="navbar">
  <div class="container--large">
    <div class="leftSide">
      <Logo />
    </div>
    <div class="rightSide">
      <a
        class:list={[
          'link',
          {
            'link--active': pathname === '/' || pathname === '/es/',
            'link--disabled': pathname === '/' || pathname === '/es/'
          }
        ]}
        href={getRelativeLocaleUrl(lang, '')}>{t('navbar.home')}</a
      >
      <a
        class:list={[
          'link',
          {
            'link--active': pathname.includes('about'),
            'link--disabled': pathname.includes('about')
          }
        ]}
        href={getRelativeLocaleUrl(lang, 'about')}>{t('navbar.about')}</a
      >
      <a
        class:list={[
          'link',
          {
            'link--active': pathname.includes('projects'),
            'link--disabled': pathname.includes('projects')
          }
        ]}
        href={getRelativeLocaleUrl(lang, 'projects')}>{t('navbar.projects')}</a
      >
      <div class="languages">
        <a
          class:list={[
            'link',
            {
              'link--active': lang === 'en',
              'link--disabled': lang === 'en'
            }
          ]}
          href={getLanguageURL('en')}>EN</a
        >
        <div class="decorator"></div>
        <a
          class:list={[
            'link',
            {
              'link--active': lang === 'es',
              'link--disabled': lang === 'es'
            }
          ]}
          href={getLanguageURL('es')}>ES</a
        >
      </div>
      <div class="tooltipBox">
        <Button
          id="colorModeSelector"
          customClass="colorModeSelector"
          variant="ghost"
          iconOnly
        >
          <Icon
            name="moon"
            id="sunIcon"
            customClass="colorModeIcon icon--hidden"
          />
          <Icon
            name="sun"
            id="moonIcon"
            customClass="colorModeIcon icon--hidden"
          />
        </Button>
        <div class="tooltip tooltip--hidden" id="tooltip"></div>
      </div>
    </div>
  </div>
</nav>

<script define:vars={{ colorModesTranslations }}>
  function setThemeController() {
    //Initial Tooltip value and icon
    const initialTheme = localStorage.getItem('colorMode')
    const colorModeBtn = document.getElementById('colorModeSelector')
    const sunIcon = document.getElementById('sunIcon')
    const moonIcon = document.getElementById('moonIcon')
    const tooltip = document.getElementById('tooltip')

    tooltip.innerHTML =
      initialTheme === 'light'
        ? colorModesTranslations.lightMode
        : colorModesTranslations.darkMode

    initialTheme === 'light'
      ? moonIcon.classList.remove('icon--hidden')
      : sunIcon.classList.remove('icon--hidden')

    //Color mode toggler
    colorModeBtn.addEventListener('click', toggleMenu)

    function toggleMenu() {
      const currentTheme = localStorage.getItem('colorMode')

      if (currentTheme === 'light') {
        localStorage.setItem('colorMode', 'dark')
        document.body.setAttribute('data-colorMode', 'dark')
        tooltip.innerHTML = colorModesTranslations.darkMode
        sunIcon.classList.remove('icon--hidden')
        moonIcon.classList.add('icon--hidden')
      } else {
        localStorage.setItem('colorMode', 'light')
        document.body.setAttribute('data-colorMode', 'light')
        tooltip.innerHTML = colorModesTranslations.lightMode
        sunIcon.classList.add('icon--hidden')
        moonIcon.classList.remove('icon--hidden')
      }
    }

    //Tooltip Functionality
    colorModeBtn.addEventListener('mouseenter', showTooltip)
    colorModeBtn.addEventListener('mouseleave', hideTooltip)

    function showTooltip() {
      tooltip.classList.remove('tooltip--hidden')
    }

    function hideTooltip() {
      tooltip.classList.add('tooltip--hidden')
    }
  }

  setThemeController()
  document.addEventListener('astro:after-swap', setThemeController)
</script>
