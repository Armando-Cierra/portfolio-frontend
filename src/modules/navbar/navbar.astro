---
import { getRelativeLocaleUrl } from 'astro:i18n'
import Button from '@components/button/button.astro'
import { getLangFromUrl, useTranslations } from '@i18n/utils'
import Logo from '@components/logo/Logo.astro'
import Icon from '@components/icon/icon.astro'
import './navbar.scss'

interface Props {
  projectSlug?: string
  translatedProjectSlug?: string
}

const { projectSlug, translatedProjectSlug }: Props = Astro.props
const url = Astro.url
const pathname = url.pathname
const lang = getLangFromUrl(url)
const t = useTranslations(lang)
const colorModesTranslations = {
  lightMode: t('navbar.lightMode'),
  darkMode: t('navbar.darkMode')
}

function getLanguageURL(lang: 'es' | 'en') {
  const languages = {
    en: () => {
      if (projectSlug) {
        let newURL = getRelativeLocaleUrl('en', pathname)
        newURL = newURL.replace(`es/`, '')
        newURL = newURL.replace(`${projectSlug}/`, '')
        newURL = newURL + `${translatedProjectSlug}/`

        return newURL
      }

      return getRelativeLocaleUrl('en', pathname.replace('/es/', ''))
    },
    es: () => {
      if (projectSlug) {
        let newURL = getRelativeLocaleUrl('es', pathname)
        newURL = newURL.replace(`${projectSlug}/`, '')
        newURL = newURL + `${translatedProjectSlug}/`

        return newURL
      }

      return getRelativeLocaleUrl('es', pathname)
    }
  }

  return languages[lang]()
}
---

<nav class="navbar">
  <div class="container--large">
    <div class="leftSide">
      <Logo />
    </div>
    <div class="rightSide">
      <a
        class:list={[
          'link',
          {
            'link--active': pathname === '/' || pathname === '/es/',
            'link--disabled': pathname === '/' || pathname === '/es/'
          }
        ]}
        href={getRelativeLocaleUrl(lang, '')}>{t('navbar.home')}</a
      >
      <a
        class:list={[
          'link',
          {
            'link--active': pathname.includes('about'),
            'link--disabled': pathname.includes('about')
          }
        ]}
        href={getRelativeLocaleUrl(lang, 'about')}>{t('navbar.about')}</a
      >
      <a
        class:list={[
          'link',
          {
            'link--active': pathname.includes('projects'),
            'link--disabled': pathname.includes('projects')
          }
        ]}
        href={getRelativeLocaleUrl(lang, 'projects')}>{t('navbar.projects')}</a
      >
      <div class="languages">
        <a
          class:list={[
            'link languageLink',
            {
              'link--active': lang === 'en',
              'link--disabled': lang === 'en'
            }
          ]}
          href={getLanguageURL('en')}>EN</a
        >
        <div class="decorator"></div>
        <a
          class:list={[
            'link languageLink',
            {
              'link--active': lang === 'es',
              'link--disabled': lang === 'es'
            }
          ]}
          href={getLanguageURL('es')}>ES</a
        >
      </div>
      <Button
        id="darkModeButton"
        customClass="colorModeSelector"
        variant="ghost"
        iconOnly
      >
        <Icon name="moon" />
        <div class="tooltip">{t('navbar.darkMode')}</div>
      </Button>
      <Button
        id="lightModeButton"
        customClass="colorModeSelector"
        variant="ghost"
        iconOnly
      >
        <Icon name="sun" />
        <div class="tooltip">{t('navbar.lightMode')}</div>
      </Button>
    </div>
  </div>
</nav>

<script define:vars={{ colorModesTranslations }} is:inline>
  document.addEventListener('astro:page-load', () => {
    const darkModeButton = document.getElementById('darkModeButton')
    const lightModeButton = document.getElementById('lightModeButton')
    const currentTheme = localStorage.getItem('colorMode')

    if (currentTheme === 'dark') {
      hideDarkButton()
    } else {
      hideLightButton()
    }

    darkModeButton.addEventListener('click', () => {
      hideDarkButton()
      document.body.setAttribute('data-colormode', 'dark')
      localStorage.setItem('colorMode', 'dark')
    })
    lightModeButton.addEventListener('click', () => {
      hideLightButton()
      document.body.setAttribute('data-colormode', 'light')
      localStorage.setItem('colorMode', 'light')
    })

    function hideDarkButton() {
      darkModeButton.classList.add('colorModeSelector--hidden')
      lightModeButton.classList.remove('colorModeSelector--hidden')
    }

    function hideLightButton() {
      darkModeButton.classList.remove('colorModeSelector--hidden')
      lightModeButton.classList.add('colorModeSelector--hidden')
    }
  })
</script>
