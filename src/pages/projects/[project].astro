---
import axios from 'axios'
import { getLangFromUrl, useTranslations } from '@i18n/utils'
import Layout from '@layouts/main/main.astro'
import Title from '@components/title/title.astro'
import Button from '@components/button/button.astro'
import Icon from '@components/icon/icon.astro'
import type { Icon as AvailableIcons } from '@components/icon/types'
import type { Project } from '@types'
import '@styles/project.scss'
import 'medium-zoom/dist/style.css'

export const prerender = false

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const { project } = Astro.params

const getProject = () =>
  axios.get(
    `https://portfolio-api-qzkq2.ondigitalocean.app/api/projects?locale=${lang}&filters[slug][$eq]=${project}&populate=*`
  )

const [
  {
    data: { data: projectRes }
  }
] = await Promise.all([getProject()])

const {
  attributes: {
    name,
    longDescription,
    tags: { data: tags },
    buttons,
    gallery: { data: gallery },
    slug,
    localizations: { data: translatedProject }
  }
} = (projectRes as Project[])[0]

const url = Astro.url
const pathname = url.pathname
const projectsURL = pathname.replace(`/${slug}`, '')
---

<Layout
  pageTitle={project as string}
  translatedSlug={translatedProject[0].attributes.slug}
  projectSlug={slug}
>
  <section class="singleProject">
    <div class="container">
      <div class="info">
        <a class="backButton" href={`${projectsURL}/`}>
          <Button variant="ghost2">
            <Icon name="leftArrow" />{t('project.back')}
          </Button>
        </a>
        <Title
          align="left"
          size="large"
          top={t('project.titleTop')}
          bottom={name}
          mainTitle
        />
        <p class="tags">
          <span class="tagsTitle">{t('project.tags')}:</span>
          <span class="tagsList"
            >{
              tags.map((tag, index) => {
                if (index + 1 === tags.length) {
                  return `${tag.attributes.name}.`
                }

                return `${tag.attributes.name}, `
              })
            }</span
          >
        </p>
        <div class="description">
          {
            longDescription.map((paragraph) =>
              paragraph.children.map((text) => <p>{text.text}</p>)
            )
          }
          <div class="buttonsBox">
            {
              buttons.map((button) => (
                <a href={button.url} target="_blank">
                  <Button variant={button.type as 'solid' | 'outline'}>
                    {button.text}
                    <Icon name={button.icon as AvailableIcons} />
                  </Button>
                </a>
              ))
            }
          </div>
        </div>
      </div>
      <div class="gallery">
        {
          gallery.map((item) => {
            if (item.attributes.mime.includes('image'))
              return (
                <img
                  class="galleryItem"
                  src={item.attributes.url}
                  alt={item.attributes.name}
                  data-zoomable
                />
              )
            if (item.attributes.mime.includes('video'))
              return (
                <video class="galleryItem" data-zoomable autoplay muted loop>
                  <source src={item.attributes.url} />
                </video>
              )
          })
        }
      </div>
    </div>
  </section>
</Layout>

<script>
  import mediumZoom from 'medium-zoom/dist/pure'
  document.addEventListener('astro:page-load', () => {
    mediumZoom('[data-zoomable]', {
      background: 'var(--background_0)',
      scrollOffset: 40
    })
  })
</script>
